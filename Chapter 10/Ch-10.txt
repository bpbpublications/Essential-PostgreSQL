Ch 10


--Update the salary of employee 1 and return its name, as shown:
select * from emp; 
update emp set salary=45674 where eid=1 returning ename;


--Add a total of 132 pages in the book ID 2, using the following query: 
update books set attr=attr||'"pages"=>132'::hstore where id=2;


--You can also use jsonb_set( ) to update json data, as shown:
jsonb_set(target jsonb, path, new value , true/false) update person_json set info = jsonb_set(info::jsonb,'{details,age}':: 
text[],'[14]',false) where id=1;


--The query to delete a record of person id 33 and then displaying the deleted record is:
delete from person where id=33 returning *;


--From the given table, we want to remove the record of Mark with ID 5. We will use the following query:
delete from sales_employees where emp_id=5 and emp_name='Mark';


--ON CONFLICT specifies alternative action to be taken in case of conflict occurring during the insert operation, as shown:
 	INSERT INTO table_name(column_list) 
 	VALUES(value_list)
 	ON CONFLICT target action;


--For example, create a table USERS with a unique username:
create table users ( uid serial primary key, username varchar(20) unique, email varchar(20));


--Insert some rows in the table using:
insert into users (username,email) values ('Anderson','and@gmail.com'),
('Robert','robe@gmail.com'),
('Jerry','Jerr@gmail.com'),
('Mike','mik@gmail.com'),
('Chris','chris@gmail.com'),
('Patrik','patk@gmail.com') select * from users;


--Now, try to add some more rows to update email. If some names already exist, ignore them.
insert into users (username,email) values ('Andrew','and@gmail.com'),
('Robert','robert@gmail.com'),
('Jerry','John@gmail.com'),
('Marry','mary@gmail.com') ON CONFLICT(username) do nothing;


--Let us update the email in the same query as above if the username conflicts:
insert into users (username,email) values 
('Andrew','and@gmail.com'),
('Robert','robert@gmail.com'),
('Jerry','John@gmail.com'),
('Marry','mary@gmail.com') ON  CONFLICT(username) do update set email=EXCLUDED.email;
