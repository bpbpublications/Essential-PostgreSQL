  Chapter:16  

#create or replace function get_product_count(price_from int,price_to int)
returns int  
as $$
declare 
prod_count int;
begin
	select count(*)  into prod_count from products 
	where unit_price >=price_from and unit_price<=price_to;
	return prod_count;
end ;$$ language plpgsql;

#create or replace function get_product_count(price_from int,price_to int)
returns int  
as $$
declare
prod_count int;
begin
	select count(*) into prod_count from products
	where unit_price >=price_from and unit_price<=price_to;
	return prod_count;
end; $$ language plpgsql;


#select get_product_count(10,50);

#create or replace function get_product_name (pid int) returns varchar  
as $$
declare
prod_name varchar;
begin
select product_name into prod_name
from products
where product_id=pid;
return prod_name;
end; $$ language plpgsql;

#Select get_product_name(1);

#create or replace function get_product_price (pid int) returns numeric
as $$
declare
prod_price numeric;
begin
select unit_price into prod_price
from products
where product_id=pid;
return prod_price;
end; $$ language plpgsql;

#Select get_product_price(5);

#create or replace procedure proc1(pid integer)
as $$
declare
pname varchar;
begin
	select get_product_name(pid) into pname;
	raise notice 'product name is %',pname;
end; $$ language plpgsql;

#create or replace function cust_info(cid varchar)
returns table(cname customers.contact_name%type, ccity customers.city%type)
as $$
begin
return query select contact_name as cname,city as ccity from customers
where customer_id=cid;
if not found then
    raise exception 'not found';
end if;
end;$$ language plpgsql;

#Select * from cust_info('ANATON');

#create or replace function category_details(cid int)
returns table (cname varchar, descript text)
as $$ begin
return query select category_name, description from categories where category_id=cid;
if not found then
raise exception 'not found';
end if;
end; $$ language plpgsql;

#Select * from category_details(1);

#create or replace function func4()
returns setof customers
as $$
begin
return query select * from customers;
end; $$ language plpgsql;

#select * from func4() ;

#select * from func4() where contact_title='Owner';

#select * from func5() as typeHolder(order_id smallint,contact_name varchar);

#create or replace function func5()
returns setof record
as $$
begin
return query select order_id, contact_name from customers
inner join orders using ( customer_id);
end; $$ language plpgsql;

#create or replace function addition(num1 int ,num2 int)
returns int
as $$
declare
	result int;
begin
	result:=num1+num2;
	return result;
end ;$$ language plpgsql;

#select addition(10,20);

#create or replace function order_by_customer (cname varchar) 
returns setof varchar
as $$ 
begin
return query select product_name from products where product_id in 
(select product_id from order_details where order_id in
	(select order_id from orders where customer_id='HANAR'));
end;
$$ language plpgsql;

#Select * from order_by_customer('HANAR');

#create or replace function product_name(pid int ,out  pname varchar, out price real)
as $$
begin
	select product_name,unit_price into pname,price from products 
	where product_id=pid;
end ;
$$ language plpgsql;

#select * from product_name(5)

#create or replace function cube(INOUT N int)
as $$
begin
	N:=N*N*N;
end; $$ language plpgsql;

#create or replace function half(INOUT N numeric)
as $$
begin
	N:=N*.5
end; $$ langugae plpgsql

#select * from half(10);

#create or replace function half_double(IN N numeric,OUT half numeric,OUT doublen numeric)
as $$	
begin
	half:=N * .5;
	doublen:= N * 2;
end; $$ language plpgsql;

#create or replace function multiply(N1 int , N2 int default 1,OUT res int)
as $$
begin
	res:=N1 * N2;
end; $$ language plpgsql;

#create or replace function getName (id int) returns varchar
as $$
declare
vname varchar;
begin
select product_name into vname from products
where product_id=id;
return vname;
end; $$ language plpgsql;

#create or replace function getName (id varchar) returns varchar
as $$
declare
vname varchar;
begin
select contact_name into vname from customers
where customer_id=id;
return vname;
end; $$ language plpgsql;

#select * from getName(10);

#select * from getName('ANTON');

#CREATE OR REPLACE FUNCTION convert_to_title_case()
RETURNS TRIGGER AS $$
BEGIN
	NEW.gender := initcap(NEW.gender);
	return NEW;
END;
$$ language plpgsql;

#create trigger trig1
before insert or update on person
for each row

#execute function convert_to_title_case();

#insert into person(id,first_name,last_name,email,gender)
values(21,'Anders','Tarreb','bscholey@chron.com','male');

#select * from person where id=21;

#Select event_object_table as table_name, trigger_name
From information_schema.triggers;

#alter table person disable trigger trig1;

#alter table person enable trigger trig1

#alter trigger trig1 on person rename to title_case;

#SELECT  event_object_table AS table_name ,trigger_name         
FROM information_schema.triggers

#drop trigger trig1 on emp;

