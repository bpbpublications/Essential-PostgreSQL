Ch 12


--To list the indexes in an existing table, use the following query:
SELECT indexname, indexdef  
FROM pg_indexes  
WHERE tablename in ( 'order_details', 'products','categories');


--To list all the indexes in the database, use the following query:
SELECT tablename, indexname, indexdef  
FROM pg_indexes  
WHERE schemaname = 'public'  
ORDER BY tablename, indexname;


--To list the index of particular table, use the following query:
SELECT indexname, indexdef  
FROM pg_indexes  
WHERE tablename ='employees';

--Let us insert new rows using the given query:
insert into person values (1111,'XXX','YYY','xx@gmail.com','M'), (1111,'QQQ','YYY','qq@gmail.com','M');


--Partial indexes are used to reduce the size of the index. It speeds up the performance. Refer to the given query:
create index indx_dis on products(discontinued) where discontinued=0;


--Let us create a view basic_product_info_view which contains product name, unit price, unit in stock and stock value of the available products, using the following query:
create or replace view basic_product_info_view as select product_name, unit_price, units_in_stock, unit_price*units_in_stock as stock_value from products where units_in_stock>0;


--As we know, it is an updatable view, and hence we can update it. Refer to the given query:
UPDATE basic_product_info_view
SET unit_price = 20 
WHERE product_name = 'Chang';


--To make changes to the existing view, use the REPLACE keyword when you create a view. Two views with the same name cannot exist. 
--Refer to the given query:
CREATE OR REPLACE VIEW basic_product_info as select product_id, product_name, discontinued, unit_price, units_in_stock, unit_price*units_in_stock as stock_value from products where units_in_stock>0 order by product_id;
--Let us make the above view as insert-able view:
INSERT INTO basic_product_info_insertable_view (product_id, product_name, discontinued, unit_price, units_in_stock) values (113, 'Another test product', 0, 200, 123); SELECT * from products where product_id=113 ;


--We can restrict the user to insert a new row through view, which was not previously visible in view, using WITH CHECK OPTION, using the following query:
create or replace view emp_10 as select * from emp where dept_num=10 WITH CHECK OPTION;


--If you try to insert the row in the emp_10_1 view for department 20, it will not be allowed in the base view. Here is the query:
create or replace view emp_10 as select * from emp where dept_num=10;
create or replace view emp_10_1 as select eid,ename,salary from emp_10 WITH CASCADED CHECK OPTION; 
insert into emp_10_1 values(112,'Johnson',56566); 
insert into emp_10_1 values(113,'Johnson',56566,20,4);


--Let us create a materialized view without data:
create MATERIALIZED view emp_20 as select * from emp where dept_num=20 with no data;


--Recursive queries are also known as common table expressions (CTE).
--Refer to the given query:
WITH RECURSIVE tree AS (
    -- base case starting from grandfather
   SELECT       id,       parent_id,       name
   FROM       family
   WHERE       id =1    UNION 
    --- recursive query (note it adds to the partial table "x")
    SELECT
        p.id,
        p.parent_id,
        p.name
    FROM         family f
    INNER JOIN tree f1 
        ON f.parent_id = f1.id 
) SELECT
   * FROM    tree;


--The recursive query to display all the sub-ordinates with manager_id is as follows:
WITH RECURSIVE subordinates AS (
 	SELECT  	 	emp_id,
 	 	manager_id,
 	 	ename
 	FROM  	 	employees
 	where emp_id=2
 	UNION
 	 	SELECT
 	 	 	e. emp_id,
 	 	 	e. manager_id,
 	 	 	e. ename  	 	FROM
 	 	 	employees e
 	 	INNER JOIN subordinates s ON s.emp_id = e.manager_id
) SELECT
 	*
FROM
 	subordinates;


--Have a look at the given query:
CREATE RECURSIVE VIEW report_to (emp_id, subordinates) AS 
SELECT
 	emp_id,
 	ename AS subordinates
FROM
 	employees
WHERE
 	manager_id IS NULL
UNION ALL
 	SELECT
 	 	e.emp_id,
 	 	(
 	 	 	rl.subordinates || ' > ' || e.ename
 	 	) AS subordinates
 	FROM  	 	employees e
 	INNER JOIN report_to rl ON e.manager_id = rl.emp_id;
Select * from report_to;

